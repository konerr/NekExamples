c README -  JH010617 - First shock second-ish PLACE WE TRY
!           entropy viscosity in EUler gas dynamics! IF it works here,
!           fold it in!!
!           the almighty Sod problem in section 3 of his 1978 JCP 27

      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'   ! this is not
      include 'CMTDATA' ! the best idea
      include 'NEKUSE'
      integer e,eg

      e = gllel(eg)

!     mu= 0.5*rho*meshh(e)*(sqrt(ux**2+uy**2+uz**2)+asnd) ! blows up
!     artvisc=c_sub_e*meshh(e)**2*maxres(e)/maxdiff ! done in resvisc
                                                    ! until we have smoothing

      mu=rho*min(res2(ix,iy,iz,e,1),t(ix,iy,iz,e,3))
      nu_s=mu/rho

      mu=0.5*mu ! A factor of
           ! 2 lurks in agradu's evaluation of strain rate, even in EVM
      lambda=0.0
      udiff=0.0
      utrans=0.

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e,eg

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e,eg

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'
      include 'TORO'
      include 'CMTDATA'

      integer  e,f
      real err(4),work(4)
      integer  luout(6)
      character*24 zefn

      luout(1) = 59
      luout(2) = 60
      luout(3) = 61
      luout(4) = 62
      luout(5) = 63
      luout(6) = 64

      nxyz= nx1*ny1*nz1
      n = nxyz*nelt
      ifxyo=.true.
      if (istep.gt.1) ifxyo=.false.

      eps     = 0.00001
      time=time_cmt
      dt=dt_cmt

!     umin = glmin(t,n)
!     umax = glmax(t,n)
      umin = glmin(vx,n)
      umax = glmax(vx,n)
!     if (mod(kstep,100).eq.0) then
      if (nio.eq.0) then
!        write(6,2)istep,time,umin,' <T<',umax
         write(6,2)istep,time,umin,' <u<',umax
      endif
!     endif
2     format(i6,1p2e17.8,a4,1p1e17.8)

      if (time_cmt .eq. 0.0.and..not.ifrestart) then
           ! useric kludge to get the discontinuity right at the face
         do e=1,nelt
            iflag=1
            do i=1,nxyz
               if (xm1(i,1,1,e).lt.0.0) iflag=0
            enddo
            if (iflag .eq.1) then
               ux=dr*ur
               energy=pright/(gmaref-1.0)+0.5*dr*ur**2
               do i=1,nxyz
                  u(i,1,1,1,e)=dr
                  u(i,1,1,2,e)=ux
                  u(i,1,1,3,e)=0.0
                  u(i,1,1,4,e)=0.0
                  u(i,1,1,5,e)=energy
               enddo
            endif
         enddo
      endif

      if(ifoutfld.or.istep.eq.0) then
      call compute_primitive_vars

!     if (nio.eq.0)then ! badly parallelized
      write(zefn,'(a16,i5.5,a1,i1)') 'profiles/rhoprof',istep,'p',nid
      open(unit=luout(1),file=zefn,form="formatted")
      write(zefn,'(a14,i5.5,a1,i1)') 'profiles/uprof',istep,'p',nid
      open(unit=luout(2),file=zefn,form="formatted")
      write(zefn,'(a14,i5.5,a1,i1)') 'profiles/vprof',istep,'p',nid
      open(unit=luout(3),file=zefn,form="formatted")
      write(zefn,'(a14,i5.5,a1,i1)') 'profiles/Tprof',istep,'p',nid
      open(unit=luout(4),file=zefn,form="formatted")
      write(zefn,'(a17,i5.5,a1,i1)') 'profiles/rhoeprof',istep,'p',nid
      open(unit=luout(5),file=zefn,form="formatted")
      write(zefn,'(a17,i5.5,a1,i1)') 'profiles/viscprof',istep,'p',nid
      open(unit=luout(6),file=zefn,form="formatted")
!     endif
      call rzero(err,4)
      do e=1,nelt
         do k=1,nz1
         do j=1,ny1
         do i=1,nx1
            s=(xm1(i,j,k,e)-diaph1)/(time_cmt+zerotime)
            CALL SAMPLE(PMstar, UM, S, rhohere, uhere, prshere)
            err(1)=err(1)+(u(i,j,k,1,e)-rhohere)**2*bm1(i,j,k,e)
            err(2)=err(2)+(u(i,j,k,2,e)-rhohere*uhere)**2*bm1(i,j,k,e)
            err(3)=err(3)+(u(i,j,k,3,e))**2*bm1(i,j,k,e)
            energy=prshere/(gmaref-1.0)+0.5*rhohere*uhere**2
            err(4)=err(4)+(u(i,j,k,5,e)-energy)**2*bm1(i,j,k,e)
! profile writer not parallelized correctly
            if (abs(ym1(i,j,k,e)).lt.1.0e-6) then
!              if (mod(istep,iostep).eq.0.or.istep.eq.0) then
                  write(luout(1),'(3e25.16)')
     >               xm1(i,j,k,e),u(i,j,k,1,e),rhohere
                  write(luout(2),'(3e25.16)')
     >               xm1(i,j,k,e),vx(i,j,k,e),uhere
                  write(luout(3),'(2e25.16)')
     >               xm1(i,j,k,e),vy(i,j,k,e)
                  write(luout(4),'(3e25.16)') xm1(i,j,k,e),T(i,j,k,e,1),
     >               prshere/(gmaref-1.0)/rhohere/cvgref
                  write(luout(5),'(3e25.16)')
     >               xm1(i,j,k,e),u(i,j,k,5,e),energy
                  write(luout(6),'(4e25.16)')
     >               xm1(i,j,k,e),vdiff(i,j,k,e,imu),vdiff(i,j,k,e,inus)
     >              ,t(i,j,k,e,3)
!              endif
            endif
! profile writer not parallelized correctly
         enddo
         enddo
         enddo
      enddo
      do i=1,6
         close(luout(i))
      enddo
      call gop(err,work,'+  ',4) ! Add across all processors
      call vsqrt(err,4)

!     call out_fld_nek ! need restart condition
!-----------------------------------------------------------------------
! JH030317
! adding output fields for diagnostic purposes. optional, but perhaps should
! be flagged by values in uservp (Navier-Stokes vs EVM GP vs both)
         call copy(t(1,1,1,1,2),vdiff(1,1,1,1,imu),n)
         call cmult(t(1,1,1,1,2),2.0,n)
         call invcol2(t(1,1,1,1,2),vtrans(1,1,1,1,irho),n)
!                        t(:,3)=wavevisc
         call copy(t(1,1,1,1,4),vdiff(1,1,1,1,inus),n)
         call copy(t(1,1,1,1,5),res2,n)
         call rzero(t(1,1,1,1,6),n)
         if(nio.eq.0) write(37,'(i5,4e25.16)'), istep,err
      endif ! ifoutfld

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,eg)
      include 'SIZE'
      include 'TSTEP'
      include 'NEKUSE'
      include 'INPUT'
      include 'TORO'
      include 'CMTDATA'
      include 'GEOM' ! not sure if this is a good idea.
      include 'PERFECTGAS'
      real nx,ny,nz  ! bite me it's fun
      integer e

!     e = gllel(eg)
      molarmass=molmass
      phi=1.0
      cp=cpgref
      cv=cvgref
      uy=0.0
      uz=0.0
      if (x .lt. diaph1) then
         ux=ul
         pres=pl
         rho=dl
      else
         ux=ur
         pres=pright
         rho=dr
      endif
      temp=MixtPerf_T_DPR(rho,pres,rgasref)
      asnd=MixtPerf_C_GRT(gmaref,rgasref,temp)
      
      return
      end

c-----------------------------------------------------------------------

      subroutine useric (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'TORO'
      include 'PERFECTGAS'
      include 'CMTDATA'
      integer e,eg, eqnum

! JH073114 Toro e1rpex provides SUBROUTINE SAMPLE and is crudely grafted
!          to the end of this .usr file.
      e=gllel(eg)
      molarmass=molmass

      if (x.gt.diaph1) then
         ux=ur
         pres=pright
         rho=dr
      else
         ux=ul
         pres=pl
         rho=dl
      endif
      temp=MixtPerf_T_DPR(rho,pres,rgasref)

      uy = 0.
      uz = 0.
      phi = 1.0
      cp=cpgref
      cv=cvgref

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'
      include 'CMTDATA'
      include 'CMTTIMERS'
      include 'CMTBCDATA'
      include 'PERFECTGAS'
      molmass    = 8314.3
      muref      = 0.0
      coeflambda = -2.0/3.0
      suthcoef   = 1.0
      reftemp    = 1.0
      prlam      = 0.72
      pinfty     = 1.0
      gmaref     = 1.4
      rgasref    = MixtPerf_R_M(molmass,dum)
      cvgref     = rgasref/(gmaref-1.0)
      cpgref     = MixtPerf_Cp_CvR(cvgref,rgasref)
      gmaref     = MixtPerf_G_CpR(cpgref,rgasref) 

      res_freq = 1000000
      flio_freq=100000
!-----------------------------------------------------------------------
! JH030317
! adding output fields for diagnostic purposes. optional, but perhaps should
! be flagged by values in uservp (Navier-Stokes vs EVM GP vs both)
!
! ldimt>=3 because we need ldimt1>=4
! vdiff(:,imu) = mu, first viscosity coeff, acting on symmetric strain rate sij
! vdiff(:,iknd) = kappa, thermal conductivity
! vdiff(:,ilam) = lambda, second viscosity coeff, acting on dilatational strain
! vdiff(:,inus) = nu_s, artificial mass diffusivity in GP fluxes
!
! Of course, these coefficients are not applied to corresponding ifield like in
! vanilla nek5000. likewise, vtrans doesn't correspond directly to vdiff, either.
! So T+1 array gets used for other stuff. Document things
! here and in userchk until they become standard

      nbc = 0      ! No changes in boundary conditions required
      do i=1,ldimt
         call add_temp(f2tbc,nbc,1)
      enddo

      igeom = 2
      call setup_topo
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'
      include 'TORO'
      include 'CMTBCDATA'
      include 'CMTDATA'
      include 'PERFECTGAS'   

      outflsub=.true.
      IFCNTFILT=.false.
      ifrestart=.false.
      ifsip=.false.
      gasmodel = 1
! JH080714 Now with parameter space to sweep through
      open(unit=81,file="riemann.inp",form="formatted")
      read (81,*) domlen
      read (81,*) diaph1
      read (81,*) gmaref
      read (81,*) dl
      read (81,*) ul
      read (81,*) pl
      read (81,*) dr
      read (81,*) ur
      read (81,*) pright
      read (81,*) zerotime
      close(81)

      molmass=8314.3
      muref=0.0
      coeflambda=-2.0/3.0
      suthcoef=1.0
      prlam = 0.72
      rgasref    = MixtPerf_R_M(molmass,dum)
      cvgref     = rgasref/(gmaref-1.0)
      cpgref     = MixtPerf_Cp_CvR(cvgref,rgasref)
      gmaref     = MixtPerf_G_CpR(cpgref,rgasref) 

      c_max=0.5  ! should be 0.5, really
      c_sub_e=4.0

      call e1rpex(domlen,diaph1,gmaref,dl,ul,pl,dr,ur,
     >            pright,1.0)
      CALL SAMPLE(PMstar, UM, 0.0, rhohere, uhere, pinfty)
      reftemp=pleft/dleft/rgasref
      aleft=sqrt(gmaref*pleft/dleft)
      call domain_size(xmin,xmax,ymin,ymax,zmin,zmax)
      if(nio.eq.0)then
         write(6,*) 'domlen',domlen
         write(6,*) 'diaph1',diaph1
         write(6,*) 'gamma ',gmaref
         write(6,*) 'rhol  ',dl
         write(6,*) 'ul    ',ul
         write(6,*) 'pl    ',pl
         write(6,*) 'rhor  ',dr
         write(6,*) 'ur    ',ur
         write(6,*) 'pr    ',pright
         write(6,*) 'sound ',aleft
         write(6,*) 'ustar ',um
         write(6,*) 'dt    ',dt
         write(6,*) 'nsteps',nsteps
      endif
      return
      end
!-----------------------------------------------------------------------
      subroutine cmt_userEOS(ix,iy,iz,eg)
      include 'SIZE'
      include 'NEKUSE'
      include 'PARALLEL'
      include 'CMTDATA'
      include 'PERFECTGAS'
      integer e,eg

      cp=cpgref
      cv=cvgref
      temp=e_internal/cv
      asnd=MixtPerf_C_GRT(gmaref,rgasref,temp)
      pres=MixtPerf_P_DRT(rho,rgasref,temp)
      return
      end
!-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
c-----------------------------------------------------------------------
      subroutine e1rpex(DOMin,DIAPHin,GAMMAin,DLin,ULin,PLin,DRin,URin,
     >                  PRin,PSCALEin)
*----------------------------------------------------------------------*
*                                                                      *
C     Exact Riemann Solver for the Time-Dependent                      *
C     One Dimensional Euler Equations                                  *
*                                                                      *
C     Name of program: HE-E1RPEX                                       *
*                                                                      *
C     Purpose: to solve the Riemann problem exactly,                   *
C              for the time dependent one dimensional                  *
C              Euler equations for an ideal gas                        *
*                                                                      *
C     Input  file: e1rpex.ini                                          *
C     Output file: e1rpex.out (exact solution)                         *
*                                                                      *
C     Programer: E. F. Toro                                            *
*                                                                      *
C     Last revision: 31st May 1999                                     *
*                                                                      *
C     Theory is found in Ref. 1, Chapt. 4 and in original              *
C     references therein                                               *
*                                                                      *
C     1. Toro, E. F., "Riemann Solvers and Numerical                   *
C                      Methods for Fluid Dynamics"                     *
C                      Springer-Verlag, 1997                           *
C                      Second Edition, 1999                            *
*                                                                      *
C     This program is part of                                          *
*                                                                      *
C     NUMERICA                                                         *
C     A Library of Source Codes for Teaching,                          *
C     Research and Applications,                                       *
C     by E. F. Toro                                                    *
C     Published by NUMERITEK LTD, 1999                                 *
C     Website: www.numeritek.com                                       *
*                                                                      *
*----------------------------------------------------------------------*
*
      include 'TORO'
*
C     Declaration of variables:
*
      INTEGER I, CELLS
*
*
C     Input variables
*
C     DOMLEN   : Domain length
C     DIAPH1   : Position of diaphragm 1
C     CELLS    : Number of computing cells
C     GAMMA    : Ratio of specific heats
C     TIMEOU   : Output time
C     DL       : Initial density  on left state
C     UL       : Initial velocity on left state
C     PL       : Initial pressure on left state
C     DR       : Initial density  on right state
C     UR       : Initial velocity on right state
C     PR       : Initial pressure on right state
C     PSCALE   : Normalising constant
*
!     Initial data and parameters are now arguments

           DOMLEN=DOMin
           DIAPH1=DIAPHin
           GAMMA =GAMMAin
           DL    =DLin
           UL    =ULin
           PL    =PLin
           DR    =DRin
           UR    =URin
           PRight=PRin
           PSCALE=PSCALEin

C     Compute gamma related constants
*
      G1 = (GAMMA - 1.0)/(2.0*GAMMA)
      G2 = (GAMMA + 1.0)/(2.0*GAMMA)
      G3 = 2.0*GAMMA/(GAMMA - 1.0)
      G4 = 2.0/(GAMMA - 1.0)
      G5 = 2.0/(GAMMA + 1.0)
      G6 = (GAMMA - 1.0)/(GAMMA + 1.0)
      G7 = (GAMMA - 1.0)/2.0
      G8 = GAMMA - 1.0
*
C     Compute sound speeds
*
      CL = SQRT(GAMMA*PL/DL)
      CR = SQRT(GAMMA*PRight/DR)
*
C     The pressure positivity condition is tested for
*
      IF(G4*(CL+CR).LE.(UR-UL))THEN
*
C        The initial data is such that vacuum is generated.
C        Program stopped.
*
         WRITE(6,*)
         WRITE(6,*)'***Vacuum is generated by data***'
         WRITE(6,*)'***Program stopped***'
         WRITE(6,*)
*
         call exitt
      ENDIF
*
C     Exact solution for pressure and velocity in star
C     region is found
*
      CALL STARPU(PMstar, UM, PSCALE)
*
      return
      end
*
*----------------------------------------------------------------------*
*
      SUBROUTINE STARPU(P, U, PSCALE)
*
c     IMPLICIT NONE
*
C     Purpose: to compute the solution for pressure and
C              velocity in the Star Region
*
C     Declaration of variables
*
      INTEGER I, NRITER
*
      REAL    DL, UL, PL, CL, DR, UR, PRight, CR,
     &        CHANGE, FL, FLD, FR, FRD, P, POLD, PSTART,
     &        TOLPRE, U, UDIFF, PSCALE
*
      COMMON /STATES/ DL, UL, PL, CL, DR, UR, PRight, CR
      DATA TOLPRE, NRITER/1.0E-06, 20/
*
C     Guessed value PSTART is computed
*
      CALL GUESSP(PSTART)
*
      POLD  = PSTART
      UDIFF = UR - UL
*
      WRITE(6,*)'----------------------------------------'
      WRITE(6,*)'   Iteration number      Change  '
      WRITE(6,*)'----------------------------------------'
*
      DO 10 I = 1, NRITER
*
         CALL PREFUN(FL, FLD, POLD, DL, PL, CL)
         CALL PREFUN(FR, FRD, POLD, DR, PRight, CR)
         P      = POLD - (FL + FR + UDIFF)/(FLD + FRD)
         CHANGE = 2.0*ABS((P - POLD)/(P + POLD))
         WRITE(6, 30)I, CHANGE
         IF(CHANGE.LE.TOLPRE)GOTO 20
         IF(P.LT.0.0)P = TOLPRE
         POLD  = P
*
 10   CONTINUE
*
      WRITE(6,*)'Divergence in Newton-Raphson iteration'
*
 20   CONTINUE
*
C     Compute velocity in Star Region
*
      U = 0.5*(UL + UR + FR - FL)
*
      WRITE(6,*)'---------------------------------------'
      WRITE(6,*)'   Pressure        Velocity'
      WRITE(6,*)'---------------------------------------'
      WRITE(6,40)P/PSCALE, U
      WRITE(6,*)'---------------------------------------'
*
 30   FORMAT(5X, I5,15X, F12.7)
 40   FORMAT(2(F14.6, 5X))
*
      END
*
*----------------------------------------------------------------------*
*
      SUBROUTINE GUESSP(PMstar)
*
C     Purpose: to provide a guessed value for pressure
C              PM in the Star Region. The choice is made
C              according to adaptive Riemann solver using
C              the PVRS, TRRS and TSRS approximate
C              Riemann solvers. See Sect. 9.5 of Chapt. 9
C              of Ref. 1
*
c     IMPLICIT NONE
*
C     Declaration of variables
*
      REAL    DL, UL, PL, CL, DR, UR, PRight, CR,
     &        GAMMA, G1, G2, G3, G4, G5, G6, G7, G8,
     &        CUP, GEL, GER, PMstar, PMAX, PMIN, PPV, PQ,
     &        PTL, PTR, QMAX, QUSER, UM
*
      COMMON /GAMMAS/ GAMMA, G1, G2, G3, G4, G5, G6, G7, G8
      COMMON /STATES/ DL, UL, PL, CL, DR, UR, PRight, CR
*
      QUSER = 2.0
*
C     Compute guess pressure from PVRS Riemann solver
*
      CUP  = 0.25*(DL + DR)*(CL + CR)
      PPV  = 0.5*(PL + PRight) + 0.5*(UL - UR)*CUP
      PPV  = MAX(0.0, PPV)
      PMIN = MIN(PL,  PRight)
      PMAX = MAX(PL,  PRight)
      QMAX = PMAX/PMIN
*
      IF(QMAX.LE.QUSER.AND.
     & (PMIN.LE.PPV.AND.PPV.LE.PMAX))THEN
*
C        Select PVRS Riemann solver
*
         PMstar = PPV
      ELSE
         IF(PPV.LT.PMIN)THEN
*
C           Select Two-Rarefaction Riemann solver
*
            PQ  = (PL/PRight)**G1
            UM  = (PQ*UL/CL + UR/CR +
     &            G4*(PQ - 1.0))/(PQ/CL + 1.0/CR)
            PTL = 1.0 + G7*(UL - UM)/CL
            PTR = 1.0 + G7*(UM - UR)/CR
            PMstar  = 0.5*(PL*PTL**G3 + PRight*PTR**G3)
         ELSE
*
C           Select Two-Shock Riemann solver with
C           PVRS as estimate
*
            GEL = SQRT((G5/DL)/(G6*PL + PPV))
            GER = SQRT((G5/DR)/(G6*PRight + PPV))
            PMstar=(GEL*PL+GER*PRight-(UR-UL))/(GEL+GER)
         ENDIF
      ENDIF
*
      END
*
*----------------------------------------------------------------------*
*
      SUBROUTINE PREFUN(F,FD,P,DK,PK,CK)
*
C     Purpose: to evaluate the pressure functions
C              FL and FR in exact Riemann solver
C              and their first derivatives
*
c     IMPLICIT NONE
*
C     Declaration of variables
*
      REAL    AK, BK, CK, DK, F, FD, P, PK, PRATIO, QRT,
     &        GAMMA, G1, G2, G3, G4, G5, G6, G7, G8
*
      COMMON /GAMMAS/ GAMMA, G1, G2, G3, G4, G5, G6, G7, G8
*
      IF(P.LE.PK)THEN
*
C        Rarefaction wave
*
         PRATIO = P/PK
         F    = G4*CK*(PRATIO**G1 - 1.0)
         FD   = (1.0/(DK*CK))*PRATIO**(-G2)
      ELSE
*
C        Shock wave
*
         AK  = G5/DK
         BK  = G6*PK
         QRT = SQRT(AK/(BK + P))
         F   = (P - PK)*QRT
         FD  = (1.0 - 0.5*(P - PK)/(BK + P))*QRT
      ENDIF
*
      END
*
*----------------------------------------------------------------------*
*
      SUBROUTINE SAMPLE(PMstar, UM, S, D, U, P)
*
C     Purpose: to sample the solution throughout the wave
C              pattern. Pressure PM and velocity UM in the
C              Star Region are known. Sampling is performed
C              in terms of the 'speed' S = X/T. Sampled
C              values are D, U, P
*
C     Input variables : PMstar, UM, S, /GAMMAS/, /STATES/
C     Output variables: D, U, P
*
c     IMPLICIT NONE
*
C     Declaration of variables
*
      REAL    DL, UL, PL, CL, DR, UR, PRight, CR,
     &        GAMMA, G1, G2, G3, G4, G5, G6, G7, G8,
     &        C, CML, CMR, D, P, PMstar, PML, PMR,  S,
     &        SHL, SHR, SL, SR, STL, STR, U, UM
*
      COMMON /GAMMAS/ GAMMA, G1, G2, G3, G4, G5, G6, G7, G8
      COMMON /STATES/ DL, UL, PL, CL, DR, UR, PRight, CR

      IF(S.LE.UM)THEN
*
C        Sampling point lies to the left of the contact
C        discontinuity
*
         IF(PMstar.LE.PL)THEN
*
C           Left rarefaction
*
            SHL = UL - CL
*
            IF(S.LE.SHL)THEN
*
C              Sampled point is left data state
*
               D = DL
               U = UL
               P = PL
            ELSE
               CML = CL*(PMstar/PL)**G1
               STL = UM - CML
*
               IF(S.GT.STL)THEN
*
C                 Sampled point is Star Left state
*
                  D = DL*(PMstar/PL)**(1.0/GAMMA)
                  U = UM
                  P = PMstar
               ELSE
*
C                 Sampled point is inside left fan
*
                  U = G5*(CL + G7*UL + S)
                  C = G5*(CL + G7*(UL - S))
                  D = DL*(C/CL)**G4
                  P = PL*(C/CL)**G3
               ENDIF
            ENDIF
         ELSE
*
C           Left shock
*
            PML = PMstar/PL
            SL  = UL - CL*SQRT(G2*PML + G1)
*
            IF(S.LE.SL)THEN
*
C              Sampled point is left data state
*
               D = DL
               U = UL
               P = PL
*
            ELSE
*
C              Sampled point is Star Left state
*
               D = DL*(PML + G6)/(PML*G6 + 1.0)
               U = UM
               P = PMstar
            ENDIF
         ENDIF
      ELSE
*
C        Sampling point lies to the right of the contact
C        discontinuity
*
         IF(PMstar.GT.PRight)THEN
*
C           Right shock
*
            PMR = PMstar/PRight
            SR  = UR + CR*SQRT(G2*PMR + G1)
*
            IF(S.GE.SR)THEN
*
C              Sampled point is right data state
*
               D = DR
               U = UR
               P = PRight
            ELSE
*
C              Sampled point is Star Right state
*
               D = DR*(PMR + G6)/(PMR*G6 + 1.0)
               U = UM
               P = PMstar
            ENDIF
         ELSE
*
C           Right rarefaction
*
            SHR = UR + CR
*
            IF(S.GE.SHR)THEN
*
C              Sampled point is right data state
*
               D = DR
               U = UR
               P = PRight
            ELSE
               CMR = CR*(PMstar/PRight)**G1
               STR = UM + CMR
*
               IF(S.LE.STR)THEN
*
C                 Sampled point is Star Right state
*
                  D = DR*(PMstar/PRight)**(1.0/GAMMA)
                  U = UM
                  P = PMstar
               ELSE
*
C                 Sampled point is inside left fan
*
                  U = G5*(-CR + G7*UR + S)
                  C = G5*(CR - G7*(UR - S))
                  D = DR*(C/CR)**G4
                  P = PRight*(C/CR)**G3
               ENDIF
            ENDIF
         ENDIF
      ENDIF
*
      END
*
c----------------------------------------------------------------------c
*
      subroutine cmt_usrflt(rmult)
      include 'SIZE'
      real rmult(lx1)
      real alpfilt
      integer sfilt, kut
      real eta, etac
      call rone(rmult,lx1)
      alpfilt=36.0 ! H&W 5.3
      kut=lx1/2
      sfilt=8
      etac=real(kut)/real(nx1)
      do i=kut,nx1
         eta=real(i)/real(nx1)
         rmult(i)=exp(-alpfilt*((eta-etac)/(1.0-etac))**sfilt)
      enddo
      return
      end

c----------------------------------------------------------------------c

      subroutine compute_entropy(s)
! computes entropy at istep and pushes the stack down for previous
! steps needed to compute ds/dt via finite difference (for now).
! hardcoded for Burgers equation. More later when folded into CMT-nek
! for Burgers, s=energy=1/2 U^2
      include 'SIZE'
      include 'TOTAL'  ! tlag is lurking. be careful
      include 'CMTDATA'
! I've always seen lorder=3, but I still need three steps
!          s(:,               1,       1)  ! entropy at current step
!          s(:,               2,       1)  ! entropy at step n-1
!          s(:,               1,       2)  ! entropy at step n-2
      real s(lx1*ly1*lz1*lelt,lorder-1,*)
      real ntol
      integer e
      data icalld /0/
      save icalld

      n=nx1*ny1*nz1
      ntot=n*nelt
      ntol=1.0e-10

      if (icalld .eq. 0) then
         write(6,*) 'zeroing out entropy stack',istep
         icalld=1
         call rzero(s,ntot)
         call rzero(s(1,1,2),ntot) ! s_{n-1}
         call rzero(s(1,2,1),ntot) ! s_n
      endif

! compute the current entropy
      rgam=rgasref/(gmaref-1.0)
      do i=1,ntot
         rho=max(vtrans(i,1,1,1,irho),ntol)
         s(i,1,1)=rgam*rho*log(pr(i,1,1,1)/(rho**gmaref))
      enddo

      if (stage .eq. 1) then
! push the stack
         call copy(s(1,1,2),s(1,2,1),ntot) ! s_{n-1}=s_n
         call copy(s(1,2,1),s(1,1,1),ntot) ! fill s_n
      endif

      return
      end

!-----------------------------------------------------------------------

      subroutine entropy_viscosity
      include 'SIZE'
      include 'TOTAL'
      include 'CMTDATA'
      parameter (lxyz=lx1*ly1*lz1)
      common /scrns/ scrent(lxyz,lelt)
      integer e
      character*132 deathmessage

      pi=4.0*atan(1.0)

      n=nx1*ny1*nz1
      ntot=n*nelt

! entropy at this and lorder prior steps
      call compute_entropy(tlag)
! compute maxval(|S-<S>|)
      savg    =    glsc2(tlag,bm1,ntot)
      savg    = -savg/volvm1
      call cadd2(scrent,tlag,savg,ntot)
      maxdiff =     glamax(scrent,ntot)
      if (maxdiff.le.0.0) then
         write(deathmessage,*) 'zero maxdiff usually means NAN$'
         call exittr(deathmessage,maxdiff,istep)
      endif
      call entropy_residual(tlag) ! fill res2
      call wavevisc(t(1,1,1,1,3))
      call resvisc(res2) ! overwrite res2

      return
      end

c-----------------------------------------------------------------------

      subroutine entropy_residual(s)
! COMPUTE R=ds/dt + div F(s) for entropy pair s and (hardcoded) F
! and store its norm functional thing |R| in res2 where it will
! provide artificial viscosity according to the code in
! entropy_viscosity and the method of Guermond
      include 'SIZE'
      include 'TOTAL' ! tlag lurks
      include 'CMTDATA'
      integer e
      real dsdtcoef(3) ! put this in /TIMESTEPCOEF/ someday
      data dsdtcoef /1.0,1.0,0.5/
      real s(lx1*ly1*lz1*lelt,lorder-1,ldimt) ! because it's really tlag

      n=nx1*ny1*nz1
      ntot=n*nelt

! I set istep=kstep. why do I need to do this again?
      if (istep .eq. 1) return
! Guermond Pasquetti & Popov (2011) (2.26) suggest a pointwise convective
! form for the entropy residual
!     call copy (vx,t,ntot) ! flux jacobian for system is just U
!     call rzero(vy,ntot) ! 1D
!     call rzero(vz,ntot) ! 1D
!     call conv1(phig,s)  ! do flux div this way?
!     call copy(tlag(1,1,1,1,2,3),res2,ntot) ! diagnostic ! TEST THIS FLUX DIV?
! ds/dt via 1-sided finite difference. 
! stage1: w/rt previous time step
! later stages: between tn+cdt and tn
      rdt=1.0/(dsdtcoef(stage)*DT_cmt)
      if (stage .eq. 1) then ! THE MOST SABOTAGEABLE PART OF THE CODE
         call sub3(res2,s(1,1,1),s(1,1,2),ntot) ! EVALUATE s_n-s_{n-1}
      else
         call sub3(res2,s(1,1,1),s(1,2,1),ntot) ! EVALUATE s^{(stage)}-s_n
      endif
      call cmult(res2,rdt,ntot)
! res2=ds/dt. now,

!-----------------------------------------------------------------------
! cons approach: strong-conservation form of flux divergence in entropy residual
!-----------------------------------------------------------------------
! get around to expanding totalh to store fluxes for whole fields and
! properly vectorize evaluate_*_h and flux_div_integral
      do e=1,nelt
!! diagnostic
!         if (mod(istep,iostep).eq.0) then ! compare ds/dt to resid
!            do i=1,n
!               write(nid*1000+istep,*) xm1(i,1,1,e),ym1(i,1,1,e),
!     >                            res2(i,1,1,e,1)
!            enddo
!         endif
!! diagnostic
         call evaluate_entropy_flux(e) ! diffh. zero it before diffusion 
         call flux_div_mini(e) ! into res2 it goes.
      enddo
      maxres=glamax(res2,ntot)
! actually...
!-----------------------------------------------------------------------
! conv1 approach: convective form of flux divergence in entropy residual
!-----------------------------------------------------------------------
! Guermond Pasquetti & Popov (2011) (2.26) suggest a pointwise convective
! form for the entropy residual. see cburg.usr for further exploration

      return
      end

c-----------------------------------------------------------------------

      subroutine evaluate_entropy_flux(e)
! entropy flux function for entropy residual.
! just vel*s for now
      include 'SIZE'
      include 'SOLN'
      include 'INPUT'
      include 'CMTDATA'
      integer e

      call rzero(totalh,3*nxd*nyd*nzd)
      n=nx1*ny1*nz1

      call col3(totalh(1,1),vx(1,1,1,e),tlag(1,1,1,e,1,1),n)
      call col3(totalh(1,2),vy(1,1,1,e),tlag(1,1,1,e,1,1),n)
      if (if3d) call col3(totalh(1,3),vz(1,1,1,e),tlag(1,1,1,e,1,1),n)

      return
      end

c-----------------------------------------------------------------------

      subroutine flux_div_mini(e)
      include 'SIZE'
      include 'INPUT'
      include 'GEOM'
      include 'DXYZ'
      include 'SOLN'
      include 'CMTDATA'
      parameter (ldd=lx1*ly1*lz1)
      parameter (ldg=lx1**3,lwkd=2*ldg)
      common /ctmp1/ ur(ldd),us(ldd),ut(ldd),ju(ldd),ud(ldd),tu(ldd)
      real ju

      integer e

      nrstd=ldd
      nxyz=nx1*ny1*nz1
      mdm1=nx1-1

      call rzero(ur,nrstd)
      call rzero(us,nrstd)
      call rzero(ut,nrstd)
      call rzero(ud,nrstd)
      call rzero(tu,nrstd)

      if (if3d) then
         call local_grad3(ur,us,ut,totalh(1,1),mdm1,1,dxm1,dxtm1)
         do i=1,nxyz
            ud(i) = jacmi(i,e)*(rxm1(i,1,1,e)*ur(i)
     $                        + sxm1(i,1,1,e)*us(i)
     $                        + txm1(i,1,1,e)*ut(i))
         enddo
         call local_grad3(ur,us,ut,totalh(1,2),mdm1,1,dxm1,dxtm1)
         do i=1,nxyz ! confirmed to have no effect in 1D
            ud(i)=ud(i)+jacmi(i,e)*(rym1(i,1,1,e)*ur(i)
     $                            + sym1(i,1,1,e)*us(i)
     $                            + tym1(i,1,1,e)*ut(i))
         enddo
         call local_grad3(ur,us,ut,totalh(1,3),mdm1,1,dxm1,dxtm1)
         do i=1,nxyz ! confirmed to have no effect in 1D
            ud(i)=ud(i)+jacmi(i,e)*(rzm1(i,1,1,e)*ur(i)
     $                            + szm1(i,1,1,e)*us(i)
     $                            + tzm1(i,1,1,e)*ut(i))
         enddo
      else
         call local_grad2(ur,us,totalh(1,1),mdm1,1,dxm1,dxtm1)
         do i=1,nxyz
            ud(i) = jacmi(i,e)*(rxm1(i,1,1,e)*ur(i)
     $                        + sxm1(i,1,1,e)*us(i))
         enddo
         call local_grad2(ur,us,totalh(1,2),mdm1,1,dxm1,dxtm1)
         do i=1,nxyz
            ud(i)=ud(i)+jacmi(i,e)*(rym1(i,1,1,e)*ur(i)
     $                            + sym1(i,1,1,e)*us(i))
         enddo
      endif
      call add2(res2(1,1,1,e,1),ud,nxyz)

      return
      end

!-----------------------------------------------------------------------

      subroutine resvisc(residual)
! max entropy visc, defined by Guermond, Popov, whoever (chapter-verse)
! as 
! in a given element
      include 'SIZE'
      include 'TOTAL'
      include 'CMTDATA'
      include 'DG'
      integer lfq,heresize,hdsize
      parameter (lfq=lx1*lz1*2*ldim*lelt,
     >                   heresize=nqq*3*lfq,
     >                   hdsize=toteq*3*lfq) ! might not need ldim
      common /CMTSURFLX/ flux(heresize),graduf(hdsize)
      real flux,graduf
      parameter (lxyz=lx1*ly1*lz1)
      real residual(lxyz,nelt)
      integer e,f
      real maxjump

      nxyz =nx1*ny1*nz1
      nxz  =nx1*nz1
      nface=2*ndim
      nxzf =nxz*nface
      nfq  =nxzf*nelt

! [[entropyflux]]/h is not working correctly
!     iqm=1
!     iqp=iqm+4*nfq

!     call fillq(1,tlag,flux(iqm),flux(iqp))
!     call fillq(2,vx,flux(iqm),flux(iqp))
!     call fillq(3,vy,flux(iqm),flux(iqp))
!     call fillq(4,vz,flux(iqm),flux(iqp))

!     call jumpflux(flux(iqm),flux(iqp))

      l=1
      do e=1,nelt
         maxres(e)=vlamax(residual(1,e),nxyz)
         maxjump=vlamax(flux(l),nxzf)/meshh(e) ! |s u.n|/h
         l=l+nxzf
!!!!     if (maxjump .gt. maxres(e)) maxres(e)=maxjump
         do i=1,nxyz ! overwrite residual
!           residual(i,e)=c_sub_e*gridh(e)**2*maxres(e)
            residual(i,e)=c_sub_e*meshh(e)**2*maxres(e)
         enddo
      enddo

      call max_to_trilin(residual)

      return
      end

      subroutine jumpflux(qminus,jump)
      include 'SIZE'
      include 'GEOM'
      include 'DG'
      include 'INPUT'
      include 'CMTDATA'
      real qminus(nx1*nz1,2*ndim,nelt,4),
     >       jump(nx1*nz1,2*ndim,nelt)
      integer e,f
      character*3 cb

      nxz =nx1*nz1
      nface=2*ndim
      nxzf=nface*nxz
      nfq=nxzf*nelt

! form s u.n !!!!RFFFFFFFUUUUUUUUUUU unx is fixed at 6
!     call col3   (jump,unx,qminus(1,1,1,iux),nfq)
!     call addcol3(jump,uny,qminus(1,1,1,iuy),nfq)
!     if (if3d) call addcol3(jump,unz,qminus(1,1,1,iuz),nfq)
!     call col2(jump,qminus,nfq) ! 1 assumed to be entropy

! BC check. DO NOTHING FOR NOW
      ifield=1 ! FIX THIS

      do e=1,nelt
         do f=1,2*ndim
            cb=cbc(f,e,ifield)
            if (cb.ne.'E  '.and.cb.ne.'P  ') then
               call rzero(jump(1,f,e),nxz)
            else
               call col3   (jump(1,f,e),unx(1,1,f,e),qminus(1,f,e,iux),
     >                      nxz)
               call addcol3(jump(1,f,e),uny(1,1,f,e),qminus(1,f,e,iuy),
     >                      nxz)
               if (if3d)
     >         call addcol3(jump(1,f,e),unz(1,1,f,e),qminus(1,f,e,iuz),
     >                      nxz)
               call col2(jump(1,f,e),qminus(1,f,e,1),nxz) ! 1 assumed to be entropy
            endif
         enddo
      enddo

      call gs_op(dg_hndl,jump,1,1,0)

      return
      end

!-----------------------------------------------------------------------

      subroutine wavevisc(numax)
! max entropy visc, defined by Guermond, Popov, whoever (chapter-verse)
! as 
! numax = c_max*h*max(dH/dU)
! in a given element
      include 'SIZE'
      include 'TOTAL'
      include 'CMTDATA'
      parameter (lxyz=lx1*ly1*lz1)
      common /scrns/ wavespeed(lxyz)
      real wavespeed
      real maxeig
      real numax(lxyz,nelt)
      integer e

      nxyz=nx1*ny1*nz1

      do e=1,nelt
         do i=1,nxyz
            wavespeed(i)=csound(i,1,1,e)+
     >      sqrt(vx(i,1,1,e)**2+vy(i,1,1,e)**2+vz(i,1,1,e)**2)
         enddo
         maxeig=vlamax(wavespeed,nxyz)
         rhomax(e)=vlamax(vtrans(1,1,1,e,irho),nxyz)
         do i=1,nxyz
!           numax(i,e)=c_max*maxeig*gridh(i,e)
            numax(i,e)=c_max*maxeig*meshh(e)
         enddo
      enddo

      call max_to_trilin(numax)

      return
      end

!-----------------------------------------------------------------------

      subroutine max_to_trilin(field)
! stupid subroutine to take a stupid uniform field and compute a trilinear
! tent between maximum shared values at the vertices.
      include 'SIZE'
      include 'TOTAL'
      real field(lx1,ly1,lz1,nelt)
      integer e

      character*32 fname ! diagnostic

      nxyz=nx1*ny1*nz1

! get maxima on faces
      call dsop(field,'MAX',nx1,ny1,nz1)

! trilinear interpolation. you should adapt xyzlin to your needs instead
      do e=1,nelt
         p000=field(1,  1,  1,  e)
         p100=field(nx1,1,  1,  e)
         p010=field(1,  ny1,1,  e)
         p110=field(nx1,ny1,1,  e)
         p001=field(1,  1,  nz1,e)
         p101=field(nx1,1,  nz1,e)
         p011=field(1,  ny1,nz1,e)
         p111=field(nx1,ny1,nz1,e)
         c1=p100-p000
         c2=p010-p000
         c3=p001-p000
         c4=p110-p010-p100+p000
         c5=p011-p001-p010+p000
         c6=p101-p001-p100+p000
         c7=p111-p011-p101-p110+p100+p001+p010-p000
         rdx=1.0/(xm1(nx1,1,1,e)-xm1(1,1,1,e)) ! cubes only!!!
         rdy=1.0/(ym1(1,ny1,1,e)-ym1(1,1,1,e))
         rdz=0.0
         if(if3d) rdz=1.0/(zm1(1,1,nz1,e)-zm1(1,1,1,e))
         do i=1,nxyz
            deltax=rdx*(xm1(i,1,1,e)-xm1(1,1,1,e)) ! cubes only!!!
            deltay=rdy*(ym1(i,1,1,e)-ym1(1,1,1,e))
            deltaz=0.0
            if (if3d) deltaz=rdz*(zm1(i,1,1,e)-zm1(1,1,1,e))
            field(i,1,1,e)=p000+c1*deltax+c2*deltay+c3*deltaz+
     >                          c4*deltax*deltay+c5*deltay*deltaz+
     >                       c6*deltaz*deltax+c7*deltay*deltaz*deltax
         enddo
      enddo

      return
      end
